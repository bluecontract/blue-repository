name: Document Session Bootstrap
type: MyOS Admin Base
description: MyOS-specific document for bootstrapping document sessions and tracking bootstrap progress
document:
  description: Target Blue document to be bootstrapped
channelBindings:
  type: Dictionary
  keyType: Text
  valueType: Channel
  description: Maps channel names to participant identifiers
initialMessages:
  description: Messages sent to participants when inviting them to the bootstrapped document
  defaultMessage:
    type: Text
    description: Default invitation message sent to all participants
  perChannel:
    type: Dictionary
    keyType: Text
    valueType: Text
    description: Per-channel custom invitation messages
capabilities:
  type: Dictionary
  keyType: Text
  valueType: Boolean
  description: Optional MyOS Admin capability contracts to attach (participantsOrchestration, sessionInteraction, workerAgency)
bootstrapStatus:
  type: Document Status
  description: Overall bootstrap process status
bootstrapError:
  type: Text
  description: Error message explaining bootstrap failure
initiatorSessionIds:
  type: List
  itemType: Text
  description: Session IDs created for the bootstrap initiator (caller)
participantsState:
  type: Dictionary
  description: Maps channel names to participant activation tracking
  keyType: Text
  valueType: Participant Activation State

contracts:
  triggeredEventsChannel:
    type: Triggered Event Channel

  lifecycle:
    type: Lifecycle Event Channel
    event:
      type: Document Processing Initiated

  initHandler:
    type: Sequential Workflow
    channel: lifecycle
    steps:
      - name: Initialize Bootstrap Status
        type: Update Document
        changeset:
          - op: replace
            path: /bootstrapStatus
            val:
              type: Status In Progress

  handleParticipantResolved:
    type: Sequential Workflow
    channel: triggeredEventsChannel
    event:
      type: Participant Resolved
    steps:
      - name: Prepare Participant State
        type: JavaScript Code
        code: |
          const participantState = {
            accountStatus: event.participant?.status?.accountStatus || 'Unknown', // "Active" | "Inactive"
            errorMessage: ''
          };

          return {
            participantState,
            channelName: event.channelName
          };

      - name: Update Participants State
        type: Update Document
        changeset:
          - op: replace
            path: /participantsState/${steps['Prepare Participant State'].channelName}
            val: "${steps['Prepare Participant State'].participantState}"

  handleTargetDocumentSessionStarted:
    type: Sequential Workflow
    channel: triggeredEventsChannel
    event:
      type: Target Document Session Started
    steps:
      - name: Update Initiator Session
        type: Update Document
        changeset:
          - op: replace
            path: /initiatorSessionIds
            val: "${event.initiatorSessionIds}"

      - name: Emit Completion Event
        type: JavaScript Code
        code: |
          return { events: [ { type: 'Status Change', status: { type: 'Status Completed' } } ] };

  handleBootstrapFailed:
    type: Sequential Workflow
    channel: triggeredEventsChannel
    event:
      type: Bootstrap Failed
    steps:
      - name: Update Error Message
        type: Update Document
        changeset:
          - op: replace
            path: /bootstrapError
            val: "${event.reason}"

      - name: Emit Failure Event
        type: JavaScript Code
        code: |
          return { events: [ { type: 'Status Change', status: { type: 'Status Failed' } } ] };

  handleStatusChange:
    type: Sequential Workflow
    channel: triggeredEventsChannel
    event:
      type: Status Change
    steps:
      - name: Update Bootstrap Status
        type: Update Document
        changeset:
          - op: replace
            path: /bootstrapStatus
            val: "${event.status}"