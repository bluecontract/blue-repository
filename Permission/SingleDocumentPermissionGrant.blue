name: Single Document Permission Grant

# ----------------- Document fields -----------------

targetSessionId:
  type: Text
  description: Target document session id to grant access to

# Exactly ONE of (granteeChannel, granteeDocumentId) must be provided:
# - granteeChannel bound  ⇒ grantee principal is 'account' (owner of that channel)
# - granteeDocumentId set ⇒ grantee principal is 'document' (this documentId)
granteeDocumentId:
  type: Text
  description: >
    Optional original document id (blueId). If set ⇒ grantee principal is 'document' with this id.
    If omitted ⇒ principal is 'account' (owner of the granteeChannel).

granterDocumentSessionId:
  type: Text
  description: Optional. If set, MyOS should evaluate authority using this document session as the principal (instead of granter accountId).

# Rights declaration (READ grant is mandatory)
permissions:
  type: Single Document Permission Set
  description: Rights to grant on the target session (READ required; allOps and singleOps are mutually exclusive; singleOps is optional but must be non-empty if provided).

# ---------- Contracts (participants, operations, workflows) ----------
contracts:
  # Participants (channels)
  granterChannel:
    type: MyOS Timeline Channel
    description: Granter/owner’s timeline (actor allowed to request revoke)

  # NOTE: Binding this channel ⇒ grantee principal is 'account'.
  # If you do NOT bind this channel, you MUST provide granteeDocumentId (⇒ 'document' principal).
  granteeChannel:
    type: MyOS Timeline Channel
    description: Grantee’s timeline (recipient of the rights) — optional if granteeDocumentId is used
  
  myOsAdminChannel:
    type: MyOS Timeline Channel
    description: MyOS Admin (accountId=0) — posts operational progress/decisions via myOsAdminUpdate

  initLifecycleChannel:
    type: Lifecycle Event Channel
    event:
      type: Document Processing Initiated

  # --- Admin callback: emit whatever Admin sends (progress/decision events) ---
  myOsAdminUpdate:
    type: Operation
    description: Operation for MyOS Admin to emit progress/decision events
    channel: myOsAdminChannel
    request:
      type: List
      itemType: Event
      description: Events to emit as-is (e.g., Single Document Permission Granted, Single Document Permission Rejected)

  myOsAdminUpdateImpl:
    type: Sequential Workflow Operation
    description: Implementation that re-emits the provided events
    operation: myOsAdminUpdate
    steps:
      - name: EmitAdminEvents
        type: JavaScript Code
        code: |
          return { events: event.message.request };

  revoke:
    type: Operation
    description: Granter or grantee indicates the grant should be revoked (MyOS Admin will handle)
    request:
      type: Text
      description: Optional human-readable reason

  revokeImplGranter:
    type: Sequential Workflow Operation
    description: Emit a revoke request event
    channel: granterChannel
    operation: revoke
    steps:
      - name: EmitRevokeRequested
        type: JavaScript Code
        code: |
          return {
            events: [
              {
                type: "Single Document Permission Revoke Requested",
                reason: event.message.request
              }
            ]
          };

  revokeImplGrantee:
    type: Sequential Workflow Operation
    description: Emit a revoke request event
    channel: granteeChannel
    operation: revoke
    steps:
      - name: EmitRevokeRequested
        type: JavaScript Code
        code: |
          return {
            events: [
              {
                type: "Single Document Permission Revoke Requested",
                reason: event.message.request
              }
            ]
          };

  # --- Initial validation on first tick ---
  validateOnInit:
    type: Sequential Workflow
    channel: initLifecycleChannel
    steps:
      - name: ValidateBasicShape
        type: JavaScript Code
        code: |
          const issues = [];

          // targetSessionId required
          const target = document('/targetSessionId');
          if (!target || typeof target !== 'string') {
            issues.push("targetSessionId is missing or invalid");
          }

          // permissions block checks
          const perms = document('/permissions');
          if (!perms || typeof perms !== 'object') {
            issues.push("permissions block is missing");
          } else {
            if (perms.read !== true) {
              issues.push("permissions.read must be true for SDPG");
            }
            const hasSingle = Object.prototype.hasOwnProperty.call(perms, 'singleOps');
            const isList = Array.isArray(perms?.singleOps);
            if (hasSingle) {
              if (!isList || perms.singleOps.length === 0) {
                issues.push("permissions.singleOps must be a non-empty list when provided");
              } else {
                const bad = perms.singleOps.find(x => typeof x !== 'string' || x.trim().length === 0);
                if (bad !== undefined) {
                  issues.push("permissions.singleOps must contain only non-empty strings");
                }
              }
            }
            if (perms.allOps === true && hasSingle) {
              issues.push("permissions.allOps=true and permissions.singleOps are mutually exclusive");
            }
          }

          // XOR: exactly one of (granteeChannel bound) or (granteeDocumentId provided)
          const gdoc = document('/granteeDocumentId');
          const granteeChannelAccountId = document('/granteeChannel/accountId');
          const hasGranteeChannel = typeof granteeChannelAccountId === 'string' && granteeChannelAccountId.length > 0;

          if (typeof gdoc === 'string' && gdoc.trim().length === 0) {
            issues.push("granteeDocumentId must be a non-empty string when provided");
          }

          if (hasGranteeChannel && gdoc) {
            issues.push("Provide either granteeChannel (account principal) OR granteeDocumentId (document principal), not both");
          } else if (!hasGranteeChannel && !gdoc) {
            issues.push("You must provide granteeChannel (account principal) OR granteeDocumentId (document principal)");
          } else if (gdoc && typeof gdoc !== 'string') {
            issues.push("granteeDocumentId, when provided, must be a string (originalBlueId)");
          }

          if (issues.length > 0) {
            return { events: [ { type: "Single Document Permission Invalid", issues } ] };
          }
          return { events: [ { type: "Single Document Permission Validated" } ] };
